// ==========================================
// –°–ò–°–¢–ï–ú–ê –ñ–ò–í–´–• –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Binance API + –í–∞—à–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
// ==========================================

class LiveSignalSystem {
    constructor() {
        this.ws = null;
        this.currentSymbol = 'BTCUSDT';
        this.candles = [];
        this.interval = '15m'; // 15 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.strategies = {
            TREND: new LiveTRENDStrategy(),
            trendline: new LiveTrendlineStrategy(),
            channel: new LiveChannelStrategy()
        };
        this.lastSignals = {};
        this.isAnalyzing = false;
        this.signalHistory = [];
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    async initialize() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã Live —Å–∏–≥–Ω–∞–ª–æ–≤...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ localStorage
        this.loadHistory();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        await this.loadHistoricalData();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.connectWebSocket();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        this.startAnalysisLoop();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
        this.updateSignalHistoryUI();
        
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ Live —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
    async loadHistoricalData(symbol = this.currentSymbol, limit = 500) {
        try {
            const url = `https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=${this.interval}&limit=${limit}`;
            const response = await fetch(url);
            const data = await response.json();
            
            this.candles = data.map(kline => ({
                time: kline[0],
                open: parseFloat(kline[1]),
                high: parseFloat(kline[2]),
                low: parseFloat(kline[3]),
                close: parseFloat(kline[4]),
                volume: parseFloat(kline[5])
            }));

            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.candles.length} —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}`);
            
            // –°—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.analyzeAllStrategies();
            
            return this.candles;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            return [];
        }
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö
    connectWebSocket() {
        if (this.ws) this.ws.close();

        const stream = `${this.currentSymbol.toLowerCase()}@kline_${this.interval}`;
        const wsUrl = `wss://stream.binance.com:9443/ws/${stream}`;
        
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
            console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Binance');
        };
        
        this.ws.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                if (data.k) {
                    this.updateCandle(data.k);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket:', error);
            }
        };
        
        this.ws.onclose = () => {
            console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...');
            setTimeout(() => this.connectWebSocket(), 5000);
        };

        this.ws.onerror = (error) => {
            console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–∏ –∏–∑ WebSocket
    updateCandle(klineData) {
        const newCandle = {
            time: klineData.t,
            open: parseFloat(klineData.o),
            high: parseFloat(klineData.h),
            low: parseFloat(klineData.l),
            close: parseFloat(klineData.c),
            volume: parseFloat(klineData.v)
        };

        // –ï—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        if (klineData.x) {
            this.candles.push(newCandle);
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–≤–µ—á–µ–π
            if (this.candles.length > 500) {
                this.candles.shift();
            }
            console.log('üïØÔ∏è –ù–æ–≤–∞—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å, –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...');
            this.analyzeAllStrategies();
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
            if (this.candles.length > 0) {
                this.candles[this.candles.length - 1] = newCandle;
            }
        }
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥)
    startAnalysisLoop() {
        setInterval(() => {
            if (!this.isAnalyzing && this.candles.length > 0) {
                this.analyzeAllStrategies();
            }
        }, 15000); // 15 —Å–µ–∫—É–Ω–¥
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    analyzeAllStrategies() {
        if (this.isAnalyzing || this.candles.length < 50) return;
        
        this.isAnalyzing = true;
        
        try {
            // –ù–∞—Ö–æ–¥–∏–º swing —Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π trendline –∏ channel
            const swingPoints = this.findSwingPoints(this.candles);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            const signals = {
                TREND: this.strategies.TREND.analyze(this.candles),
                trendline: this.strategies.trendline.analyze(this.candles, swingPoints),
                channel: this.strategies.channel.analyze(this.candles, swingPoints)
            };

            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:', signals);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
            Object.entries(signals).forEach(([strategyName, signal]) => {
                if (!signal || !signal.signal) return;

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                const fullSignal = {
                    ...signal,
                    strategy: strategyName,
                    symbol: this.currentSymbol,
                    timestamp: Date.now()
                };

                // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                this.updateStrategySignal(fullSignal);

                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (this.isNewSignal(strategyName, signal)) {
                    this.sendNotification(fullSignal);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                this.lastSignals[strategyName] = signal;
            });

            // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è
            const bestSignal = this.selectBestSignal(signals);
            if (bestSignal) {
                this.updateLiveSignalUI(bestSignal);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
        } finally {
            this.isAnalyzing = false;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    updateStrategySignal(signal) {
        // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        const signalKey = `lastSignal_${signal.strategy}`;
        const signalData = {
            id: Date.now(),
            symbol: signal.symbol,
            strategy: signal.strategy,
            signal: signal.signal,
            reason: signal.reason || '',
            price: signal.price,
            confidence: signal.confidence || 0,
            time: new Date().toLocaleTimeString('ru-RU'),
            timestamp: signal.timestamp
        };

        localStorage.setItem(signalKey, JSON.stringify(signalData));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è ${signal.strategy}:`, signalData);

        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º UI
        if (window.currentStrategyType === signal.strategy) {
            window.dispatchEvent(new CustomEvent('signalUpdated', { 
                detail: signalData 
            }));
        }
    }

    // –ü–æ–∏—Å–∫ swing —Ç–æ—á–µ–∫
    findSwingPoints(candles, lookback = 3) {
        const swings = [];
        
        for (let i = lookback; i < candles.length - lookback; i++) {
            let isHigh = true, isLow = true;
            
            for (let j = i - lookback; j <= i + lookback; j++) {
                if (j === i) continue;
                if (candles[j].high >= candles[i].high) isHigh = false;
                if (candles[j].low <= candles[i].low) isLow = false;
            }
            
            if (isHigh) swings.push({ index: i, price: candles[i].high, type: 'high', time: candles[i].time });
            if (isLow) swings.push({ index: i, price: candles[i].low, type: 'low', time: candles[i].time });
        }
        
        return swings;
    }

    // –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    selectBestSignal(signals) {
        let bestSignal = null;
        let maxConfidence = 0;

        Object.entries(signals).forEach(([strategy, signal]) => {
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏–≥–Ω–∞–ª–∞–º BUY/SELL/BREAKOUT/BREAKDOWN
            const priority = ['BUY', 'SELL', 'BREAKOUT', 'BREAKDOWN', 'TOUCH'].includes(signal.signal);
            const confidence = signal.confidence || 0;
            
            if (priority && confidence > maxConfidence) {
                maxConfidence = confidence;
                bestSignal = {
                    ...signal,
                    strategy: strategy,
                    symbol: this.currentSymbol
                };
            }
        });

        return bestSignal || {
            signal: 'NEUTRAL',
            reason: '–ù–µ—Ç —è–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
            strategy: 'COMBINED',
            symbol: this.currentSymbol,
            price: this.candles[this.candles.length - 1].close,
            confidence: 30
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    isNewSignal(strategyName, signal) {
        const lastSignal = this.lastSignals[strategyName];
        if (!lastSignal) return true;
        
        return lastSignal.signal !== signal.signal;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToHistory(signal) {
        const historyItem = {
            ...signal,
            timestamp: Date.now(),
            id: Date.now()
        };

        this.signalHistory.unshift(historyItem);
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        if (this.signalHistory.length > 10) {
            this.signalHistory = this.signalHistory.slice(0, 10);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('signalHistory', JSON.stringify(this.signalHistory));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ localStorage
    loadHistory() {
        const saved = localStorage.getItem('signalHistory');
        if (saved) {
            try {
                this.signalHistory = JSON.parse(saved);
            } catch (e) {
                this.signalHistory = [];
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    updateSignalHistoryUI() {
        const historyContainer = document.getElementById('signalHistoryContainer');
        if (!historyContainer) return;

        if (this.signalHistory.length === 0) {
            historyContainer.innerHTML = `
                <div style="text-align:center; padding:20px; color:#888;">
                    üìä –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–∞
                </div>
            `;
            return;
        }

        const signalColors = {
            'BUY': '#00ff9f',
            'SELL': '#ff4d4d',
            'BREAKOUT': '#00d4ff',
            'BREAKDOWN': '#ff8800',
            'TOUCH': '#ffaa00',
            'NEUTRAL': '#888888',
            'HOLD': '#9966ff'
        };

        const signalEmojis = {
            'BUY': 'üìà',
            'SELL': 'üìâ',
            'BREAKOUT': 'üöÄ',
            'BREAKDOWN': '‚¨áÔ∏è',
            'TOUCH': 'üëÜ',
            'NEUTRAL': '‚öñÔ∏è',
            'HOLD': '‚è∏Ô∏è'
        };

        let html = '<div style="display:flex; flex-direction:column; gap:8px;">';

        this.signalHistory.forEach((item, index) => {
            const color = signalColors[item.signal] || '#888888';
            const emoji = signalEmojis[item.signal] || 'üìä';
            const time = new Date(item.timestamp).toLocaleTimeString('ru-RU');
            const date = new Date(item.timestamp).toLocaleDateString('ru-RU');
            const price = item.price ? '$' + item.price.toFixed(2) : 'N/A';

            html += `
                <div style="background:rgba(255,255,255,0.05); border-left:4px solid ${color}; 
                            border-radius:8px; padding:10px; transition:all 0.2s;
                            cursor:pointer;" 
                     onmouseover="this.style.background='rgba(255,255,255,0.08)'"
                     onmouseout="this.style.background='rgba(255,255,255,0.05)'">
                    <div style="display:flex; justify-content:space-between; align-items:center;">
                        <div>
                            <span style="color:${color}; font-weight:700; font-size:14px;">
                                ${emoji} ${item.signal}
                            </span>
                            <span style="color:#888; font-size:12px; margin-left:8px;">
                                ${item.strategy.toUpperCase()}
                            </span>
                        </div>
                        <div style="text-align:right;">
                            <div style="font-size:12px; color:#4facfe;">${price}</div>
                            <div style="font-size:10px; color:#888;">${time}</div>
                        </div>
                    </div>
                    <div style="margin-top:5px; font-size:11px; color:#aaa;">
                        ${item.symbol} ‚Ä¢ ${item.confidence}% ‚Ä¢ ${item.reason}
                    </div>
                </div>
            `;
        });

        html += '</div>';
        historyContainer.innerHTML = html;
    }

    // –†–∏—Å—É–µ–º –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ (SVG)
    drawMiniChart(signal) {
        // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const displayCandles = this.candles.slice(-50);
        if (displayCandles.length < 2) {
            return '<div style="text-align:center; color:#888;">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</div>';
        }

        const width = 350;
        const height = 120;
        const padding = { top: 10, right: 10, bottom: 10, left: 10 };
        
        const chartWidth = width - padding.left - padding.right;
        const chartHeight = height - padding.top - padding.bottom;

        // –ù–∞—Ö–æ–¥–∏–º min/max —Ü–µ–Ω
        const prices = displayCandles.map(c => [c.high, c.low]).flat();
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        const priceRange = maxPrice - minPrice || 1;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Å–≤–µ—á–∏ –≤ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
        const toX = (index) => {
            return padding.left + (index / (displayCandles.length - 1)) * chartWidth;
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –≤ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
        const toY = (price) => {
            return padding.top + chartHeight - ((price - minPrice) / priceRange) * chartHeight;
        };

        // –†–∏—Å—É–µ–º —Å–≤–µ—á–∏
        let candlesSVG = '';
        const candleWidth = Math.max(2, chartWidth / displayCandles.length * 0.7);

        displayCandles.forEach((candle, i) => {
            const x = toX(i);
            const openY = toY(candle.open);
            const closeY = toY(candle.close);
            const highY = toY(candle.high);
            const lowY = toY(candle.low);

            const isGreen = candle.close >= candle.open;
            const color = isGreen ? '#26a69a' : '#ef5350';

            // –§–∏—Ç–∏–ª—å
            candlesSVG += `
                <line x1="${x}" y1="${highY}" x2="${x}" y2="${lowY}" 
                      stroke="${color}" stroke-width="1"/>
            `;

            // –¢–µ–ª–æ —Å–≤–µ—á–∏
            const bodyHeight = Math.max(1, Math.abs(closeY - openY));
            candlesSVG += `
                <rect x="${x - candleWidth / 2}" y="${Math.min(openY, closeY)}" 
                      width="${candleWidth}" height="${bodyHeight}" 
                      fill="${color}"/>
            `;
        });

        // –õ–∏–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        const currentPriceY = toY(signal.price);
        const signalColors = {
            'BUY': '#00ff9f',
            'SELL': '#ff4d4d',
            'BREAKOUT': '#00d4ff',
            'BREAKDOWN': '#ff8800',
            'TOUCH': '#ffaa00',
            'NEUTRAL': '#888888',
            'HOLD': '#9966ff'
        };
        const currentColor = signalColors[signal.signal] || '#888888';

        return `
            <svg width="100%" height="${height}" viewBox="0 0 ${width} ${height}" 
                 style="background:rgba(10,14,39,0.5); border-radius:8px;">
                
                <!-- –°–µ—Ç–∫–∞ -->
                <line x1="${padding.left}" y1="${padding.top}" 
                      x2="${padding.left}" y2="${height - padding.bottom}" 
                      stroke="rgba(255,255,255,0.1)" stroke-width="1"/>
                <line x1="${padding.left}" y1="${height - padding.bottom}" 
                      x2="${width - padding.right}" y2="${height - padding.bottom}" 
                      stroke="rgba(255,255,255,0.1)" stroke-width="1"/>
                
                <!-- –°–≤–µ—á–∏ -->
                ${candlesSVG}
                
                <!-- –õ–∏–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã -->
                <line x1="${padding.left}" y1="${currentPriceY}" 
                      x2="${width - padding.right}" y2="${currentPriceY}" 
                      stroke="${currentColor}" stroke-width="2" stroke-dasharray="5,5" opacity="0.8"/>
                
                <!-- –ú–µ—Ç–∫–∞ —Ü–µ–Ω—ã -->
                <text x="${width - padding.right - 5}" y="${currentPriceY - 5}" 
                      fill="${currentColor}" font-size="10" text-anchor="end" font-weight="bold">
                    $${signal.price.toFixed(2)}
                </text>
            </svg>
        `;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –∂–∏–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º
    updateLiveSignalUI(signal) {
        const card = document.getElementById("signalCard");
        if (!card) return;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addToHistory(signal);

        const logos = {
            BTCUSDT: "https://assets.coingecko.com/coins/images/1/large/bitcoin.png",
            ETHUSDT: "https://assets.coingecko.com/coins/images/279/large/ethereum.png",
            BNBUSDT: "https://assets.coingecko.com/coins/images/825/large/bnb-icon2_2x.png",
            SOLUSDT: "https://assets.coingecko.com/coins/images/4128/large/solana.png",
            XRPUSDT: "https://assets.coingecko.com/coins/images/44/large/xrp-symbol-white-128.png",
            ADAUSDT: "https://assets.coingecko.com/coins/images/975/large/cardano.png"
        };

        const signalColors = {
            'BUY': '#00ff9f',
            'SELL': '#ff4d4d',
            'BREAKOUT': '#00d4ff',
            'BREAKDOWN': '#ff8800',
            'TOUCH': '#ffaa00',
            'NEUTRAL': '#888888',
            'HOLD': '#9966ff'
        };

        const signalEmojis = {
            'BUY': 'üìà',
            'SELL': 'üìâ',
            'BREAKOUT': 'üöÄ',
            'BREAKDOWN': '‚¨áÔ∏è',
            'TOUCH': 'üëÜ',
            'NEUTRAL': '‚öñÔ∏è',
            'HOLD': '‚è∏Ô∏è'
        };

        const color = signalColors[signal.signal] || '#888888';
        const emoji = signalEmojis[signal.signal] || 'üìä';
        const logo = logos[signal.symbol] || logos.BTCUSDT;

        const price = signal.price ? signal.price.toFixed(2) : 'N/A';
        const confidence = signal.confidence || 0;
        const time = new Date().toLocaleTimeString('ru-RU');

        // –†–∏—Å—É–µ–º –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫
        const chartSVG = this.drawMiniChart(signal);

        card.innerHTML = `
            <div style="display:flex; flex-direction:column; align-items:center; gap:10px; animation: fadeIn 0.5s;">
                <img src="${logo}" alt="${signal.symbol}" 
                     style="width:70px; height:70px; border-radius:50%; 
                            box-shadow:0 0 20px ${color}; transition: all 0.3s;">
                
                <div style="text-align:center;">
                    <h3 style="color:${color}; margin:5px 0; font-size:20px; font-weight:700;">
                        ${emoji} ${signal.signal}
                    </h3>
                    <p style="margin:3px 0; font-size:13px; opacity:0.8;">
                        –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>${signal.strategy.toUpperCase()}</b>
                    </p>
                </div>

                <!-- –ú–ò–ù–ò-–ì–†–ê–§–ò–ö -->
                <div style="background:rgba(0,0,0,0.3); border-radius:10px; padding:10px; width:100%; margin:5px 0;">
                    <p style="margin:0 0 8px 0; font-size:12px; opacity:0.7; text-align:center;">
                        üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å–≤–µ—á–µ–π
                    </p>
                    ${chartSVG}
                </div>

                <div style="background:rgba(255,255,255,0.05); border-radius:10px; padding:12px; width:100%;">
                    <p style="margin:5px 0; font-size:14px;">
                        üí∞ –ú–æ–Ω–µ—Ç–∞: <b>${signal.symbol}</b>
                    </p>
                    <p style="margin:5px 0; font-size:14px;">
                        üíµ –¶–µ–Ω–∞: <b>$${price}</b>
                    </p>
                    <p style="margin:5px 0; font-size:14px;">
                        üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>${confidence}%</b>
                    </p>
                    <p style="margin:5px 0; font-size:14px;">
                        üïê –í—Ä–µ–º—è: <b>${time}</b>
                    </p>
                </div>

                <p style="font-size:13px; opacity:0.9; text-align:center; line-height:1.5;">
                    ${signal.reason}
                </p>

                <div style="width:100%; height:3px; background:${color}; border-radius:2px; opacity:0.5;"></div>
            </div>
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
        this.updateSignalHistoryUI();

        // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        localStorage.setItem('lastLiveSignal', JSON.stringify({
            id: Date.now(),
            symbol: signal.symbol,
            strategy: signal.strategy || window.currentStrategyType || 'trend',
            signal: signal.signal,
            reason: signal.reason || '',
            price: signal.price,
            confidence: signal.confidence || 0,
            time: time
        }));

        // üí´ –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card.style.animation = 'pulse 0.5s ease-in-out';
        setTimeout(() => {
            card.style.animation = '';
        }, 500);
    }

    // üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sendNotification(signal) {
        if (window.notificationManager) {
            window.notificationManager.showNotification({
                id: Date.now(),
                symbol: signal.symbol,
                signal: signal.signal,
                strategy: signal.strategy,
                reason: signal.reason,
                price: signal.price,
                confidence: signal.confidence
            });
        }

        console.log("üì¢ –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:", signal);

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        this.updateStrategySignal(signal);

        // üîÑ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if (typeof injectLatestSignalIntoStrategy === 'function') {
            injectLatestSignalIntoStrategy();
        }
    }

    // –°–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞
    changeSymbol(symbol) {
        this.currentSymbol = symbol;
        this.candles = [];
        this.lastSignals = {};
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π WebSocket
        if (this.ws) this.ws.close();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        this.loadHistoricalData(symbol).then(() => {
            this.connectWebSocket();
        });
    }

    // –°–º–µ–Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    changeInterval(interval) {
        this.interval = interval;
        this.candles = [];
        this.lastSignals = {};
        
        if (this.ws) this.ws.close();
        
        this.loadHistoricalData(this.currentSymbol).then(() => {
            this.connectWebSocket();
        });
    }
}

// ==========================================
// –°–¢–†–ê–¢–ï–ì–ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
// ==========================================

class LiveTRENDStrategy {
    constructor() {
        this.name = 'TREND';
        this.period = 14;
    }

    analyze(candles) {
        if (candles.length < this.period + 3) {
            return { signal: 'WAIT', reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', confidence: 0 };
        }

        // –í—ã—á–∏—Å–ª—è–µ–º MA
        const ma = [];
        for (let i = this.period - 1; i < candles.length; i++) {
            let sum = 0;
            for (let j = i - this.period + 1; j <= i; j++) {
                sum += candles[j].close;
            }
            ma.push(sum / this.period);
        }

        const last3 = candles.slice(-3);
        const allAbove = last3.every((c, i) => c.close > ma[ma.length - 3 + i]);
        const allBelow = last3.every((c, i) => c.close < ma[ma.length - 3 + i]);

        const price = candles[candles.length - 1].close;

        if (allAbove) {
            return {
                signal: 'BUY',
                reason: '3 —Å–≤–µ—á–∏ –ø–æ–¥—Ä—è–¥ –∑–∞–∫—Ä—ã–ª–∏—Å—å –≤—ã—à–µ TREND',
                price: price,
                confidence: 85
            };
        } else if (allBelow) {
            return {
                signal: 'SELL',
                reason: '3 —Å–≤–µ—á–∏ –ø–æ–¥—Ä—è–¥ –∑–∞–∫—Ä—ã–ª–∏—Å—å –Ω–∏–∂–µ TREND',
                price: price,
                confidence: 85
            };
        }

        return {
            signal: 'NEUTRAL',
            reason: '–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞',
            price: price,
            confidence: 40
        };
    }
}

class LiveTrendlineStrategy {
    constructor() {
        this.name = 'Trendline';
    }

    analyze(candles, swingPoints) {
        if (!swingPoints || swingPoints.length < 4) {
            return { signal: 'WAIT', reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ swing —Ç–æ—á–µ–∫', confidence: 0 };
        }

        // –ò—â–µ–º –≤–æ—Å—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        const pattern = this.findAscendingPattern(swingPoints);
        if (!pattern) {
            return { signal: 'NEUTRAL', reason: '–ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', confidence: 20 };
        }

        const currentPrice = candles[candles.length - 1].close;
        const currentTime = candles[candles.length - 1].time;
        
        const p2 = pattern.point2;
        const p4 = pattern.point4;
        const slope = (p4.price - p2.price) / (p4.time - p2.time);
        const trendlinePrice = p4.price + slope * (currentTime - p4.time);
        
        const distance = Math.abs(currentPrice - trendlinePrice) / trendlinePrice * 100;

        if (distance < 0.5) {
            return {
                signal: 'TOUCH',
                reason: '–ö–∞—Å–∞–Ω–∏–µ –≤–æ—Å—Ö–æ–¥—è—â–µ–π —Ç—Ä–µ–Ω–¥–æ–≤–æ–π –ª–∏–Ω–∏–∏',
                price: currentPrice,
                confidence: 75
            };
        } else if (currentPrice < trendlinePrice * 0.995) {
            return {
                signal: 'BREAKDOWN',
                reason: '–ü—Ä–æ–±–æ–π —Ç—Ä–µ–Ω–¥–æ–≤–æ–π –ª–∏–Ω–∏–∏ –≤–Ω–∏–∑',
                price: currentPrice,
                confidence: 80
            };
        }

        return {
            signal: 'HOLD',
            reason: '–¶–µ–Ω–∞ –≤—ã—à–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π –ª–∏–Ω–∏–∏',
            price: currentPrice,confidence: 60
        };
    }

    findAscendingPattern(swings) {
        for (let i = swings.length - 1; i >= 3; i--) {
            if (swings[i].type !== 'low') continue;
            for (let j = i - 1; j >= 2; j--) {
                if (swings[j].type !== 'high') continue;
                for (let k = j - 1; k >= 1; k--) {
                    if (swings[k].type !== 'low') continue;
                    for (let l = k - 1; l >= 0; l--) {
                        if (swings[l].type !== 'high') continue;
                        if (swings[j].price > swings[l].price) {
                            return {
                                point1: swings[l],
                                point2: swings[k],
                                point3: swings[j],
                                point4: swings[i]
                            };
                        }
                    }
                }
            }
        }
        return null;
    }
}

class LiveChannelStrategy {
    constructor() {
        this.name = 'Channel';
    }

    analyze(candles, swingPoints) {
        if (!swingPoints || swingPoints.length < 3) {
            return { signal: 'WAIT', reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞', confidence: 0 };
        }

        const channel = this.findAscendingChannel(swingPoints);
        if (!channel) {
            return { signal: 'NEUTRAL', reason: '–ö–∞–Ω–∞–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', confidence: 30 };
        }

        const currentPrice = candles[candles.length - 1].close;
        const currentTime = candles[candles.length - 1].time;
        
        const slope = (channel.point3.price - channel.point1.price) / 
                     (channel.point3.time - channel.point1.time);
        
        const upper = channel.point3.price + slope * (currentTime - channel.point3.time);
        const mainAtLow = channel.point1.price + slope * (channel.point2.time - channel.point1.time);
        const offset = channel.point2.price - mainAtLow;
        const lower = upper + offset;
        
        const position = (currentPrice - lower) / (upper - lower);

        if (position >= 0.9) {
            return {
                signal: 'SELL',
                reason: '–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞',
                price: currentPrice,
                confidence: 70
            };
        } else if (position <= 0.1) {
            return {
                signal: 'BUY',
                reason: '–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞',
                price: currentPrice,
                confidence: 70
            };
        } else if (currentPrice > upper) {
            return {
                signal: 'BREAKOUT',
                reason: '–ü—Ä–æ–±–æ–π –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞ –≤–≤–µ—Ä—Ö',
                price: currentPrice,
                confidence: 85
            };
        } else if (currentPrice < lower) {
            return {
                signal: 'BREAKDOWN',
                reason: '–ü—Ä–æ–±–æ–π –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞ –≤–Ω–∏–∑',
                price: currentPrice,
                confidence: 85
            };
        }

        return {
            signal: 'HOLD',
            reason: '–¶–µ–Ω–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∫–∞–Ω–∞–ª–∞',
            price: currentPrice,
            confidence: 50
        };
    }

    findAscendingChannel(swings) {
        for (let i = swings.length - 1; i >= 2; i--) {
            if (swings[i].type !== 'high') continue;
            for (let j = i - 1; j >= 1; j--) {
                if (swings[j].type !== 'low') continue;
                for (let k = j - 1; k >= 0; k--) {
                    if (swings[k].type !== 'high') continue;
                    if (swings[i].price > swings[k].price) {
                        return {
                            point1: swings[k],
                            point2: swings[j],
                            point3: swings[i]
                        };
                    }
                }
            }
        }
        return null;
    }
}

// ==========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ==========================================

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
window.liveSignalSystem = new LiveSignalSystem();

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    // –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –≤—Å—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å
    setTimeout(() => {
        window.liveSignalSystem.initialize();
    }, 2000);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ UI)
window.changeLiveSignalSymbol = function(symbol) {
    window.liveSignalSystem.changeSymbol(symbol);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
window.changeLiveSignalInterval = function(interval) {
    window.liveSignalSystem.changeInterval(interval);
};

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
window.clearSignalHistory = function() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤?')) {
        localStorage.removeItem('signalHistory');
        if (window.liveSignalSystem) {
            window.liveSignalSystem.signalHistory = [];
            window.liveSignalSystem.updateSignalHistoryUI();
        }
        
        // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        ['TREND', 'trendline', 'channel'].forEach(strategy => {
            localStorage.removeItem(`lastSignal_${strategy}`);
        });
        
        alert('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!');
    }
};

// ‚úÖ –í–ê–ñ–ù–û: –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
window.addEventListener('signalUpdated', (event) => {
    console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ signalUpdated:', event.detail);
    
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º
    if (window.currentPage === 'strategyDetail' && typeof injectLatestSignalIntoStrategy === 'function') {
        injectLatestSignalIntoStrategy();
    }
});

console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ Live —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');